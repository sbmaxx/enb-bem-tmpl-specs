var assert = require('assert'),
    path = require('path'),
<% if (saveHtml) { %>
    fs = require('fs'),
    beautifyHtml = function(html) {
        return require('${ paths['js-beautify'] }').html(html, beautifyHtmlConfig);
    },
    beautifyHtmlConfig = { unformatted: [
    'a', 'span', 'img', 'address', 'script',
    'h1', 'h2', 'h3', 'h4', 'h5','h6',
    'dfn', 'code', 'samp', 'kbd', 'var',
    'cite', 'abbr', 'acronym', 'strong',
    'sub', 'sup', 'tt', 'big', 'small', 'strike',
    'font', 'ins', 'del', 'pre', 'address', 'dt',
    'q', 'i', 'b', 'u', 's', 'bdo', 'em'
    ]},
    saveHtmlFile = function(filename, actual, done) {
        fs.writeFile(filename, beautifyHtml(actual), done);
    },
<% } %>
    clearRequire = require('${ paths['clear-require'] }'),
    HtmlDiffer = require('${ paths['html-differ'] }').HtmlDiffer,
    htmlDiffer = new HtmlDiffer(${ JSON.stringify(diffOpts) }),
    referencesJSON = JSON.stringify(require('${ paths.references }')),
    getReferences = function () {
        return JSON.parse(referencesJSON);
    };

<%
var prettifyEngineName = function(ngn, lang) {
    return lang ? String(ngn).toLowerCase().replace(' ', '-') + '.' + lang : ngn;
}
%>

describe('${ describe }', function() {
    <% _.forEach(its, function(it) { %>
    describe('${ it }', function() {

        <% _.forEach(engines, function(engine) {
            var lang = engine.lang;

            lang = lang.isReal ? lang.name : null;

            print(template('it', {
                it: it,
                before: [
                    'var references = getReferences();',
                    'var engine = ' + loadTemplate(engine.target, engine.exportName) + ';',
                ].join('\n'),
                engine: engine,
                lang: lang,
                saveHtml: saveHtml,
                htmlPostfix: engines.length > 1 ? '.' + prettifyEngineName(engine.name, lang) + '.html' : '.html'
            }));
        }); %>

    });
    <% }); %>

}); // /describe ${ describe }

function assertHtmlAndSave(actual, expected, done, filename) {
    saveHtmlFile(filename, actual, function() {
        assertHtml(actual, expected);
        done();
    });
}

function assertHtml(actual, expected) {
   if (htmlDiffer.isEqual(actual, expected)) {
        // Throw error if actual is empty
        assert.ok(actual);
    } else {
        assert.fail(actual, expected, null, '\n');
    }
}
<%
function loadTemplate(target, exportName) {
    return 'loadTemplate(' + JSON.stringify(target) + ', ' + JSON.stringify(exportName) + ')';
}
%>
function loadTemplate(file, exportName) {
    try {
        var res = reRequire(file);
        exportName && (res = res[exportName]);
        return res;
    } catch (e) {
        console.error(e.stack);
        return { apply: function() { return e.stack; } };
    }
}
function reRequire(file) {
    file = require.resolve(file);
    clearRequire(file);
    return require(file);
}
